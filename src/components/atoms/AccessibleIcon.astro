---
import type { HTMLAttributes } from "astro/types";
import VisuallyHidden from "./VisuallyHidden.astro";

//TODO later check out https://github.com/natemoo-re/astro-icon
// it can also use local icons

// I just need the naive implementation kudos to https://ellodave.dev/blog/article/using-svgs-as-astro-components-and-inline-css/o
function addAttributesToInnerHTMLString(
  innerHTML: string,
  attributes: HTMLAttributes<"svg">,
) {
  const a11yAttributes = {
    focusable: "false",
    "aria-hidden": "true",
  };
  const attr = { ...attributes, ...a11yAttributes };
  try {
    const attributesString = Object.entries(attr)
      .map(([key, value]) => `${key}="${value}"`)
      .join(" ");

    return innerHTML.replace(/^<svg/, `<svg ${attributesString}`);
  } catch (error) {
    console.error(error);
  }
  return "";
}
type Props = {
  label: string;
  icon: string;
  attributes: Omit<HTMLAttributes<"svg">, "slot">;
};
const { icon, label, attributes } = Astro.props as Props;

// const svgs = await Astro.glob("/src/assets/images/*.svg");
// const svgs = await import.meta.glob(`/src/assets/images/${icon}.svg`, {
//   as: "raw",
// });

const { default: svg } = await import(
  /* @vite-ignore */
  `/src/assets/images/${icon}.svg?raw`
);
const innerHTML = addAttributesToInnerHTMLString(svg, attributes);
---

<>
  <Fragment set:html={innerHTML} />
  <VisuallyHidden>{label}</VisuallyHidden>
</>
<svg
  xmlns="http://www.w3.org/2000/svg"
  x="0px"
  y="0px"
  width="100"
  height="100"
  viewBox="0 0 50 50"
>
  <path
    d="M 0 7.5 L 0 12.5 L 50 12.5 L 50 7.5 L 0 7.5 z M 0 22.5 L 0 27.5 L 50 27.5 L 50 22.5 L 0 22.5 z M 0 37.5 L 0 42.5 L 50 42.5 L 50 37.5 L 0 37.5 z"
  ></path>
</svg>
